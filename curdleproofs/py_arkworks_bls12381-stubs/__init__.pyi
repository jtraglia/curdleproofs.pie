from typing import Any

from typing import Any, List, Tuple, Union

class G1Point:
    def __init__(self) -> None: ...
    
    def __add__(self, other: 'G1Point') -> 'G1Point': ...
    
    def __mul__(self, other: Scalar) -> 'G1Point': ...
    
    def __neg__(self) -> 'G1Point': ...
    
    def __sub__(self, other: 'G1Point') -> 'G1Point': ...
    
    def __eq__(self, other: Any) -> bool: ...
    
    @staticmethod
    def from_compressed_bytes(data: bytes) -> 'G1Point': ...
    
    @staticmethod
    def from_compressed_bytes_unchecked(data: bytes) -> 'G1Point': ...
    
    @staticmethod
    def identity() -> 'G1Point': ...
    
    @staticmethod
    def multiexp_unchecked(bases: List['G1Point'], scalars: List[Any]) -> 'G1Point': ...
    
    def to_compressed_bytes(self) -> bytes: ...

class Scalar:
    def __init__(self, value: int) -> None: ...
    
    def __add__(self, other: 'Scalar') -> 'Scalar': ...
    
    def __mul__(self, other: 'Scalar') -> 'Scalar': ...
    
    def __neg__(self) -> 'Scalar': ...
    
    def __sub__(self, other: 'Scalar') -> 'Scalar': ...
    
    def __eq__(self, other: Any) -> bool: ...
    
    @staticmethod
    def from_le_bytes(data: bytes) -> 'Scalar': ...
    
    def inverse(self) -> 'Scalar': ...
    
    def is_zero(self) -> bool: ...
    
    def square(self) -> 'Scalar': ...
    
    def to_le_bytes(self) -> bytes: ...
